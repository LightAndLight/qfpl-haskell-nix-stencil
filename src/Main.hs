{-# language OverloadedLists #-}
{-# language OverloadedStrings #-}
{-# language QuasiQuotes #-}

import Stencil
import Stencil.CmdLine

import qualified Data.Text as Text

import Licenses

cabalFile =
  [template|-- Initial ${package-name}.cabal generated by cabal init.  For further documentation,
-- see http://haskell.org/cabal/users-guide/

name:                ${package-name}
version:             ${version}
-- synopsis:
-- description:
license:             ${license}
--                   Must be spelled with a 'C' for nix
license-file:        LICENCE
author:              ${author-name}
maintainer:          ${author-email}
-- copyright:
-- category:
build-type:          Simple
extra-source-files:  ChangeLog.md
cabal-version:       >=1.10

library
  exposed-modules:     Blank
  -- other-modules:
  -- other-extensions:
  build-depends:       base >=4.9 && <5
  hs-source-dirs:      src
  default-language:    Haskell2010
|]

shellNix =
  [template|{ nixpkgs ? import <nixpkgs> {}, compiler ? "${ghc-version}" }:

let

  drv = import ./default.nix { inherit nixpkgs compiler; };

in

  drv.env
|]

defaultNix =
  [template|{ nixpkgs ? import <nixpkgs> {}, compiler ? "${ghc-version}" }:

let

  inherit (nixpkgs) pkgs;

  f = import ./${package-name}.nix;

  haskellPackages = if compiler == "default"
                       then pkgs.haskellPackages
                       else pkgs.haskell.packages.\${compiler};

  drv = haskellPackages.callPackage f {};

in

  drv
|]

gitignore =
  [template|
dist/
dist-newstyle/
result
.ghc.*
|]

blankHaskellFile =
  [template|module Blank where
|]

coolerCabalInit =
  promptRequired "package-name" "Package Name" *>
  promptDefault "version" "Version" "0.1.0.0" *>
  let
    d61 = ("Data61 BSD", fillTemplate [template|LICENCE|] csiroBsd *> constant "BSD3")
  in
  promptChoice
    "license"
    "License"
    [ ("GPL-2", constant "GPL-2")
    , ("GPL-3", constant "GPL-3")
    , ("LGPL-2.1", constant "LGPL-2.1")
    , ("LGPL-3", constant "LGPL-3")
    , ("BSD2", constant "BSD2")
    , ("BSD3", constant "BSD3")
    , d61
    , ("CSIRO MIT / BSD hybrid", fillTemplate [template|LICENCE|] csiroMitBsd *> constant "BSD3")
    , ("MIT", constant "MIT")
    , ("ISC", constant "ISC")
    , ("MPL-2.0", constant "MPL-2.0")
    , ("Apache-2.0", constant "Apache-2.0")
    , ("Public Domain", constant "PublicDomain")
    , ("All Rights Reserved", constant "AllRightsReserved")
    , ("Other", constant "OtherLicense")
    ]
    (Just d61) *>
  promptRequired "author-name" "Author Name" *>
  promptRequired "author-email" "Author Email" *>
  fillTemplate [template|${package-name}.cabal|] cabalFile *>
  let
    defaultGHC = ("default", constant "default")
    nix =
      ( "yes"
      , promptChoice
          "ghc-version"
          "GHC version"
          [ ("7.10.3", constant "ghc7103")
          , ("8.0.2", constant "ghc802")
          , ("8.2.2", constant "ghc822")
          , ("8.4.3", constant "ghc843")
          , ("8.6.2", constant "ghc862")
          , defaultGHC
          ]
          (Just defaultGHC) *>
        fillTemplate [template|default.nix|] defaultNix *>
        fillTemplate [template|shell.nix|] shellNix *>
        script [template|cabal2nix . > ${package-name}.nix|] *>
        constant "yes"
      )
  in
  promptChoice
    "generate-nix"
    "Generate .nix files (requires cabal2nix) (does not work on Windows)"
    [ nix
    , ("no", constant "no")
    ]
    (Just nix) *>
  fillTemplate [template|.gitignore|] gitignore *>
  mkDir "src" *>
  fillTemplate [template|src/Blank.hs|] blankHaskellFile

main = cmdLineApp coolerCabalInit
